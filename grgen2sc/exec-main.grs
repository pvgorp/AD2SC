# This file is part of AD2SC.
#  
# AD2SC: Activity Diagram to Statechart Translator
# Copyright (C) 2010,2011 Pieter Van Gorp (pieter(at)pietervangorp.com)
# Copyright (C) 2010,2011 Rik Eshuis
# 
# AD2SC is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# AD2SC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with AD2SC; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

include UML23AD.layout
include UML23SM.layout

echo "|---> Initializing AD shorthands..."
xgrs [Init_inStateAttribute] ;> [Init_typeAttribute]

# echo "|---> Showing input AD graph..."
# show graph ycomp

echo "|---> Backup input AD..." 
xgrs vID:int ;> {(vID)=valloc()} && (adIN:Activity)=GetSrcActivity && ((tp:Namespace)=GetSMTypeOnce && m:map<Node, Node>=map<Node, Node>{} && CopyUML23AD(adIN,m) && (::adCLONE)=CopyOf(adIN,m) && RMOtherCentralBuffNodes(::adCLONE,tp))* && {vfree(vID)} # && [RemoveAnyHSCelement]

# xgrs {(::vID) = valloc()} && (::adIN)=GetSrcActivity && ((::tp)=GetSMTypeOnce && ::m=map<Node, Node>{} && CopyUML23AD(::adIN,::m) && (::adCLONE)=CopyOf(::adIN,::m) ) && {vfree(::vID)} && [RemoveAnyHSCelement]

echo "|---> Preprocessing..."
xgrs {(::vID) = valloc()} && PreprocessClonedADs* && {vfree(::vID)}

echo "|---> Filtering..."
xgrs {(::vID) = valloc()} && FilterClonedADs* && {vfree(::vID)}

echo "|---> Evaluating additional cross-sync rule"
xgrs {(::vID) = valloc()} && MakeCrossSyncExplicitInClonedADs* && {vfree(::vID)}

debug xgrs MarkCoordinator* # NOTE: can be made interactive easily using $%{...}

echo "|---> Checking DAB WFR"
validate exitonfailure xgrs EachActivityAtLeastOneCoordinator


include Petri-PaperDebugSequence.layout
include HSC.layout
echo "|---> Mapping AD to PN"
xgrs {(::vID) = valloc()} & MapClonedADtoPNelements* && {vfree(::vID)}

#echo "Outputting PNML" 
#redirect emit out.pnml

echo "|---> Mapping PN to Statechart"
include PN2HSCcore.grs

#echo "|---> Deleting intermediate AD clone"
#xgrs DeleteTargetsOfAN2AN

echo "|---> AD specific beautification"
xgrs [AnyStateWithoutInflow2InitialState] $| [normalizeDoubleFinalState]
	
#echo "|---> Serializing the output model to UML SC XMI for the Eugenia based GMF editor"
#redirect emit "uml/eugenia-sc-adspecific.statechart" # is XMI2
#xgrs {(::visID2) = valloc()} && hscModel2eugeniaXMItext && {vfree(::visID2)}

debug enable

#export AD2SCout.grs